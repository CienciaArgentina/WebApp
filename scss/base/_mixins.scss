/*
@at-root a#{&} { ignore tree, a + parent
	...
}
*/

$bn-padding: 1.1rem;
$bn-border: solid .1rem;
@mixin buton-base() {
	text-align: center;
	cursor: pointer;
	border-radius: 0rem;
	border: none;
	padding: $bn-padding;
	font-weight: 600;
	position: relative;
	font-size: 1.3rem;
	user-select: none;
	&:focus {
		outline: none;
	}
	@at-root a#{&} { //if its a and button
		text-decoration: none;
		display: inline-flex;
	}
}
@mixin button--filled($bg-c: default, $color: default) {
	@include buton-base();
	// FILLED
	background: $bg-c;
	border-color: $bg-c;
	@if $color == default {
		color: white;
	}
	@else {
		color: $color;
	}
}
@mixin button--outline($bg-c: default, $color: default) {
	@include buton-base();
	// OUTLINE
	background: $transparent;
	padding: $bn-padding - .2rem;
	border: solid .2rem;
	border-color: $bg-c;
	&:before {
		font-size: 1.5rem;
	}
	@if $color == default {
		color: $bg-c;
	}
	&.bn--s {
		padding: .7rem - .2rem  1.3rem - .2rem;
	}
}
@mixin button--text($bg-c: default, $color: default) {
	@include buton-base();
	// TEXT
	border-color: $transparent;
	text-transform: uppercase;
	background: $transparent;
	@if $bg-c == default {
		color: $gray-500;
	} @else {
		color: $bg-c;
	}
}
@mixin button($bg-c: default, $color: default, $type:all) {
	@if($bg-c==default) {
		@include button--filled($lblue, $color);
	} @else {
		//Have color
		@if($type == all) {
			@include button--filled($bg-c, $color);
			&--outline {
				@include button--outline($bg-c, $color);
			}
			&--text {
				@include button--text($bg-c, $color);
			}

		} @else if($type == filled) {
			@include button--filled($bg-c, $color);

		} @else if $type == outline {
			@include button--outline($bg-c, $color);

		} @else if $type == text {
			@include button--text($bg-c, $color);
		}
	}
}
//------------------icons
@mixin bn-icon-right() {
	padding-left: 1.1rem;
	padding-right: 2.5rem;
	&.bn-s {
		padding-right: 2.3rem;
		&:before {
			right: 1.2rem;
		}
	}
	&:before {
		right: 1.5rem;
		left: initial;
		transform: translate(50%, -50%);
	}
}

@mixin bn--icon($icon-code:'\f067', $icon-w:600) {
	&, &#{'--right'} {
		padding-left: 2.5rem;
		&:before {
			@include icon-font();
			content: $icon-code;
			font-weight: $icon-w;
			position: absolute;
			line-height: 1em;
			left: 1.5rem;
			top: 50%;
			transform: translate(-50%, -50%);
		}
	}
	&--right {
		@include bn-icon-right();
		&.bn--s {
			padding-right: 2.3rem !important;
			&:before {
				right: 1.2rem
			}
		}
	}
	&.bn--s {
		padding-left: 2.3rem !important;
		&:before {
			left: 1.2rem
		}
	}
}

// flex
@mixin flex-align($h:false, $v:false){
	display: flex;
	@if($h != false){
		justify-content: $h;
	}
	@if($v != false){
		align-items: $v;
	}
}

// elevation
@mixin elevation($e:1){
	@extend .elevation#{'--z'}#{$e};
}

// spacing
@mixin spacing-size($prop, $s){
	$spacer: 1rem;
	$m: 1;
	@if ($s==0){ $m:0 }
	@else if ($s==1) { $m:.50 }
	@else if ($s==2) { $m:1 }
	@else if ($s==3) { $m:1.75 }
	@else if ($s==4) { $m:2.50 }
	@else if ($s==5) { $m:3 }
	@else if ($s==6) { $m:4 }
	@else if ($s==7) { $m:6 }
	@else if ($s==8) { $m:10 }
	@else if ($s==9) { $m:14 }
	@else if ($s==10) { $m:17 }
	@if($s == auto){
		#{$prop}: auto;
	}
	@else {
		#{$prop}: $spacer * $m;
	}
}
@mixin spacing-side($prop, $side){
	$s: "";
	@if($side==t){
		$s: "-top";
	}
	@else if($side==r){
		$s: "-right";
	}
	@else if($side==b){
		$s: "-bottom";
	}
	@else if($side==l){
		$s: "-left";
	}
	&#{$side}{
		@for $i from -1 through 10 {
			@if($i == -1){
				$i: auto;
			}
			&-#{$i} {
				@if($side==x){
					@include spacing-size($prop#{"-left"}, $i);
					@include spacing-size($prop#{"-right"}, $i);
				}
				@else if($side==y){
					@include spacing-size($prop#{"-top"}, $i);
					@include spacing-size($prop#{"-bottom"}, $i);
				}
				@else {
					@include spacing-size($prop#{$s}, $i);
				}
			}
		}	
	}
}
@mixin spacing($prop){
	@each $side in "" t r b l x y {
		&{
			@include spacing-side($prop, $side)	
		}
	} 
}

// proportion fixed
@mixin proportion($p) {
	position: relative;
	&:before {
		content: '';
		display: block;
		width: 100%;
		padding-top: $p#{"%"}; 
	}
}
// centered
@mixin abs-center() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin max-lines($lines, $lheight:1.2rem) {
	@if ($lines == 1) {
		white-space: nowrap; 
		overflow: hidden;
		text-overflow: ellipsis
	} @else {
		overflow: hidden;
		text-overflow: ellipsis;
		display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $lines; /* number of lines to show */
		line-height: $lheight;        /* fallback */
		max-height: $lheight*$lines;       /* fallback */
	}
}